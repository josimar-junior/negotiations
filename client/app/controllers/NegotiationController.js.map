{"version":3,"sources":["../../app-src/controllers/NegotiationController.js"],"names":["Negotiations","NegotiantionService","Negotiation","NegotiationsView","MessageView","Message","DateConverter","getNegotiationDao","Bind","getExceptionMessage","debounce","controller","NegotiationController","constructor","_inputDate","_inputQuantity","_inputValue","Object","assign","_negotiations","_message","_negotiationService","_init","dao","negotiations","listAll","forEach","save","negotiation","error","message","text","event","preventDefault","_createNegotiation","_cleanForm","toDate","value","parseInt","parseFloat","focus","clear","importNegotiations","getNegotiationsForThePeriod","filter","toArray","some","newNegotiation","equals","existingNegotiation"],"mappings":"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","file":"NegotiationController.js","sourcesContent":["import { Negotiations, NegotiantionService, Negotiation } from '../domain/index.js';\nimport { NegotiationsView, MessageView, Message, DateConverter } from '../ui/index.js';\nimport { getNegotiationDao, Bind, getExceptionMessage, debounce, controller } from '../util/index.js';\n\n@controller('#date', '#quantity', '#value')\nexport class NegotiationController {\n\n    constructor(_inputDate, _inputQuantity, _inputValue) {\n\n        Object.assign(this, {_inputDate, _inputQuantity, _inputValue});\n\n        this._negotiations = new Bind(new Negotiations(), new NegotiationsView('#negotiations'), 'save', 'clear');\n\n        this._message = new Bind(new Message(), new MessageView('#messageView'), 'text');\n\n        this._negotiationService = new NegotiantionService();\n\n        this._init();\n    }\n\n    async _init() {\n        try {\n            const dao = await getNegotiationDao();\n            const negotiations = await dao.listAll();\n            negotiations.forEach(negotiation => this._negotiations.save(negotiation));\n        } catch (error) {\n            this.message.text = getExceptionMessage(error);\n        }\n    }\n\n    async save(event) {\n        try {\n            event.preventDefault();\n\n            const negotiation = this._createNegotiation();\n\n            const dao = await getNegotiationDao();\n            await dao.save(negotiation);\n            this._negotiations.save(this._createNegotiation());\n            this._message.text = 'Negotiation saved successfully';\n            this._cleanForm();\n\n        } catch (error) {\n            this.message.text = getExceptionMessage(error);\n        }\n    }\n\n    _createNegotiation() {\n        return new Negotiation(DateConverter.toDate(this._inputDate.value),\n            parseInt(this._inputQuantity.value),\n            parseFloat(this._inputValue.value));\n    }\n\n    _cleanForm() {\n        this._inputDate.value = '';\n        this._inputQuantity.value = 1;\n        this._inputValue.value = 0.0;\n        this._inputDate.focus();\n    }\n\n    async clear() {\n        try {\n            const dao = await getNegotiationDao();\n            await dao.clear();\n            this._negotiations.clear();\n            this._message.text = 'Negotiations successfully deleted';\n        } catch (error) {\n            this.message.text = getExceptionMessage(error);\n        }\n    }\n\n    @debounce()\n    async importNegotiations() {\n        try {\n            const negotiations = await this._negotiationService.getNegotiationsForThePeriod();\n            negotiations.filter(newNegotiation => !this._negotiations.toArray().some(existingNegotiation =>\n                newNegotiation.equals(existingNegotiation)))\n                .forEach(negotiation => this._negotiations.save(negotiation));\n\n            this._message.text = 'Negotiations imported of the period successfully';\n        } catch (error) {\n            this.message.text = getExceptionMessage(error);\n        }\n    }\n\n}"]}