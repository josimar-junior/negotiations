{"version":3,"sources":["../../app-src/controllers/NegotiationController.js"],"names":["Negotiations","NegotiantionService","Negotiation","NegotiationsView","MessageView","Message","InvalidDateException","DateConverter","getNegotiationDao","Bind","NegotiationController","constructor","$","document","querySelector","bind","_inputDate","_inputQuantity","_inputValue","_negotiations","_message","_negotiationService","_init","dao","negotiations","listAll","forEach","save","negotiation","error","message","text","event","preventDefault","_createNegotiation","_cleanForm","console","log","stack","toDate","value","parseInt","parseFloat","focus","clear","importNegotiations","getNegotiationsForThePeriod","filter","toArray","some","newNegotiation","equals","existingNegotiation"],"mappings":"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","file":"NegotiationController.js","sourcesContent":["import { Negotiations, NegotiantionService, Negotiation } from '../domain/index.js';\nimport { NegotiationsView, MessageView, Message, InvalidDateException, DateConverter } from '../ui/index.js';\nimport { getNegotiationDao, Bind } from '../util/index.js';\n\nexport class NegotiationController {\n\n    constructor() {\n        const $ = document.querySelector.bind(document);\n\n        this._inputDate = $('#date');\n        this._inputQuantity = $('#quantity');\n        this._inputValue = $('#value');\n\n        this._negotiations = new Bind(new Negotiations(), new NegotiationsView('#negotiations'), 'save', 'clear');\n\n        this._message = new Bind(new Message(), new MessageView('#messageView'), 'text');\n\n        this._negotiationService = new NegotiantionService();\n\n        this._init();\n    }\n\n    async _init() {\n        try {\n            const dao = await getNegotiationDao();\n            const negotiations = await dao.listAll();\n            negotiations.forEach(negotiation => this._negotiations.save(negotiation));\n        } catch (error) {\n            this.message.text = error.message;\n        }\n    }\n\n    async save(event) {\n        try {\n            event.preventDefault();\n\n            const negotiation = this._createNegotiation();\n\n            const dao = await getNegotiationDao();\n            await dao.save(negotiation);\n            this._negotiations.save(this._createNegotiation());\n            this._message.text = 'Negotiation saved successfully';\n            this._cleanForm();\n\n        } catch (error) {\n            console.log(error);\n            console.log(error.stack);\n            if (error instanceof InvalidDateException) {\n                this._message.text = error.message;\n            } else {\n                this._message.text = 'Error saving negotiation';\n            }\n        }\n    }\n\n    _createNegotiation() {\n        return new Negotiation(DateConverter.toDate(this._inputDate.value),\n            parseInt(this._inputQuantity.value),\n            parseFloat(this._inputValue.value));\n    }\n\n    _cleanForm() {\n        this._inputDate.value = '';\n        this._inputQuantity.value = 1;\n        this._inputValue.value = 0.0;\n        this._inputDate.focus();\n    }\n\n    async clear() {\n        try {\n            const dao = await getNegotiationDao();\n            await dao.clear();\n            this._negotiations.clear();\n            this._message.text = 'Negotiations successfully deleted';\n        } catch (error) {\n            this._message.text = error.message;\n        }\n    }\n\n    async importNegotiations() {\n        try {\n            const negotiations = await this._negotiationService.getNegotiationsForThePeriod();\n            console.log(negotiations);\n            negotiations.filter(newNegotiation => !this._negotiations.toArray().some(existingNegotiation =>\n                newNegotiation.equals(existingNegotiation)))\n                .forEach(negotiation => this._negotiations.save(negotiation));\n\n            this._message.text = 'Negotiations imported of the period successfully';\n        } catch (error) {\n            console.log(error);\n            this._message.text = error.message;\n        }\n    }\n\n}"]}