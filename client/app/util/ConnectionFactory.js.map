{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["stores","connection","close","ConnectionFactory","constructor","Error","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";;;;;;AAAA,kBAAMA,SAAS,CAAC,cAAD,CAAf;AACA,gBAAIC,aAAa,IAAjB;AACA,gBAAIC,QAAQ,IAAZ;;AAEO,kBAAMC,iBAAN,CAAwB;;AAE3BC,8BAAc;AACV,0BAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACH;;AAED,uBAAOC,aAAP,GAAuB;AACnB,2BAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAEpC,4BAAIR,UAAJ,EACI,OAAOO,QAAQP,UAAR,CAAP;;AAEJ,8BAAMS,cAAcC,UAAUC,IAAV,CAAe,IAAf,EAAqB,CAArB,CAApB;;AAEAF,oCAAYG,eAAZ,GAA8BC,KAAK;AAC/BX,8CAAkBY,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AACH,yBAFD;;AAIAP,oCAAYQ,SAAZ,GAAwBJ,KAAK;AACzBb,yCAAaa,EAAEE,MAAF,CAASC,MAAtB;AACAf,oCAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,MAAM;AACrB,sCAAM,IAAIG,KAAJ,CAAU,yCAAV,CAAN;AACH,6BAFD;AAGAG,oCAAQP,UAAR;AACH,yBAPD;;AASAS,oCAAYU,OAAZ,GAAsBN,KAAK;AACvBO,oCAAQC,GAAR,CAAYR,EAAEE,MAAF,CAASO,KAArB;AACAd,mCAAOK,EAAEE,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,yBAHD;AAIH,qBAxBM,CAAP;AAyBH;;AAED,uBAAOT,aAAP,CAAqBd,UAArB,EAAiC;AAC7BD,2BAAOyB,OAAP,CAAeC,SAAS;AACpB,4BAAIzB,WAAW0B,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EACIzB,WAAW4B,iBAAX,CAA6BH,KAA7B;;AAEJzB,mCAAW6B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACH,qBALD;AAMH;;AAED,uBAAOC,eAAP,GAAyB;AACrB,wBAAI/B,UAAJ,EACIC;AACP;AA9C0B","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negotiations'];\nlet connection = null;\nlet close = null;\n\nexport class ConnectionFactory {\n\n    constructor() {\n        throw new Error(\"Can't create instances of this class\");\n    }\n\n    static getConnection() {\n        return new Promise((resolve, reject) => {\n\n            if (connection)\n                return resolve(connection);\n\n            const openRequest = indexedDB.open('js', 1);\n\n            openRequest.onupgradeneeded = e => {\n                ConnectionFactory._createStores(e.target.result);\n            }\n\n            openRequest.onsuccess = e => {\n                connection = e.target.result;\n                close = connection.close.bind(connection);\n                connection.close = () => {\n                    throw new Error(\"You can't close the connection directly\");\n                }\n                resolve(connection);\n            }\n\n            openRequest.onerror = e => {\n                console.log(e.target.error);\n                reject(e.target.error.name);\n            }\n        });\n    }\n\n    static _createStores(connection) {\n        stores.forEach(store => {\n            if (connection.objectStoreNames.contains(store))\n                connection.deleteObjectStore(store);\n\n            connection.createObjectStore(store, { autoIncrement: true });\n        })\n    }\n\n    static closeConnection() {\n        if (connection)\n            close();\n    }\n}"]}